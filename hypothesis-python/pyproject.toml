[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/hypothesis/version.py"

[tool.hatch.build.targets.wheel.hooks.mypyc]
# mypyc compilation notes:
# - HATCH_BUILD_HOOK_ENABLE_MYPYC=1 pip install -e hypothesis-python
#   to install a mypyc-compiled build of hypothesis
# - I've found
#   find . -type f -name "*.so" -exec rm {} \;
#   useful to clean up a mypyc build. These files persist even after
#   reinstalling without HATCH_BUILD_HOOK_ENABLE_MYPYC.

# this hook only runs if HATCH_BUILD_HOOK_ENABLE_MYPYC is set.
# see https://hatch.pypa.io/latest/config/build/#environment-variables
enable-by-default = false
dependencies = [
    "hatch-mypyc>=0.16.0",
]
# these packages are required to type-check correctly
require-runtime-dependencies = true
require-runtime-features = ["all"]
# copied from the root pyproject.toml. We'd like to direct mypyc to that file instead
# with --config-file=pyproject.toml (possibly with a fixed path?), but that's blocked
# on https://github.com/ofek/hatch-mypyc/issues/37.
mypy-args = [
    "--allow-redefinition",
    "--disallow-untyped-decorators",
    "--disallow-incomplete-defs",
    "--no-implicit-optional",
    "--no-implicit-reexport",
    "--ignore-missing-imports",
    "--strict-equality",
    "--warn-no-return",
    "--warn-unused-ignores",
    "--warn-unused-configs",
    "--warn-redundant-casts",
    "--follow-imports=silent",
]
# the defaults are:
# - debug_level = "1"
# - opt_level = "3"
#
# debug_level is 1 if debug information is included in the build, and
# opt_level is 0 for no optimization and 3 for all optimizations. I believe this
# corresponds to the gcc -O level.
options = { debug_level = "0", opt_level = "3" }
include = [
    # conjecture
    # ==========
    "src/hypothesis/internal/conjecture/choice.py",
    # "src/hypothesis/internal/conjecture/datatree.py",
    # "src/hypothesis/internal/conjecture/floats.py",
    # "src/hypothesis/internal/conjecture/junkdrawer.py",
    # "src/hypothesis/internal/conjecture/optimiser.py",
    # "src/hypothesis/internal/conjecture/pareto.py",
    # "src/hypothesis/internal/conjecture/utils.py",
    # "src/hypothesis/internal/conjecture/shrinker.py", # fatal compilation error
    # "src/hypothesis/internal/conjecture/engine.py",
    # "src/hypothesis/internal/conjecture/data.py",
    # strategies
    # ==========
    # "src/hypothesis/strategies/_internal/strings.py",  # too many interconnected subclasses
    # "src/hypothesis/strategies/_internal/strategies.py",  # too many interconnected subclasses
    # internal
    # ========
    # "src/hypothesis/internal/cathetus.py",
    # "src/hypothesis/internal/charmap.py",
    # "src/hypothesis/internal/compat.py", # issue with dynamic definition via sys.version_info
    # "src/hypothesis/internal/coverage.py", # issue with duplicate definition of check_function / etc
    # "src/hypothesis/internal/detection.py",
    # "src/hypothesis/internal/entropy.py", # weird error on line 30 KeyError: <TypeInfo hypothesis.internal.entropy.RandomLike>
    # "src/hypothesis/internal/escalation.py",
    # "src/hypothesis/internal/floats.py",
    # "src/hypothesis/internal/intervalsets.py",
    # "src/hypothesis/internal/validation.py",
    # "src/hypothesis/internal/cache.py",
    # other
    # =====
    # "src/hypothesis/database.py"  # metaclass issues (?)
]

[project]
name = "hypothesis"
dynamic = ["version"]
authors = [
    { name = "David R. MacIver and Zac Hatfield-Dodds", email = "david@drmaciver.com" }
]
description = "A library for property-based testing"
# Avoid changing this by hand. This is automatically updated by update_changelog_and_version
readme = {"text" = """<div align="center">
  <img src="https://raw.githubusercontent.com/HypothesisWorks/hypothesis/master/brand/dragonfly-rainbow.svg" width="300">
</div>

# Hypothesis

* [Website](https://hypothesis.works/)
* [Documentation](https://hypothesis.readthedocs.io/en/latest/)
* [Source code](https://github.com/hypothesisWorks/hypothesis/)
* [Contributing](https://github.com/HypothesisWorks/hypothesis/blob/master/CONTRIBUTING.rst)
* [Community](https://hypothesis.readthedocs.io/en/latest/community.html)

Hypothesis is the property-based testing library for Python. With Hypothesis, you write tests which should pass for all inputs in whatever range you describe, and let Hypothesis randomly choose which of those inputs to check - including edge cases you might not have thought about. For example:

```python
from hypothesis import given, strategies as st


@given(st.lists(st.integers()))
def test_matches_builtin(ls):
    assert sorted(ls) == my_sort(ls)
```

This randomized testing can catch bugs and edge cases that you didn't think of and wouldn't have found. In addition, when Hypothesis does find a bug, it doesn't just report any failing example â€” it reports the simplest possible one. This makes property-based tests a powerful tool for debugging, as well as testing.

For instance,

```python
def my_sort(ls):
    return sorted(set(ls))
```

fails with the simplest possible failing example:

```
Falsifying example: test_matches_builtin(ls=[0, 0])
```

### Installation

To install Hypothesis:

```
pip install hypothesis
```

There are also [optional extras available](https://hypothesis.readthedocs.io/en/latest/extras.html).
""", "content-type" = "text/markdown"}
license = "MPL-2.0"
requires-python = ">= 3.9"
keywords = ["python", "testing", "fuzzing", "property-based-testing"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Hypothesis",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "Operating System :: Unix",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Education :: Testing",
    "Topic :: Software Development :: Testing",
    "Typing :: Typed",
]

dependencies = [
    "attrs>=22.2.0",
    "exceptiongroup>=1.0.0; python_version<'3.11'",
    "sortedcontainers>=2.1.0,<3.0.0",
]

[project.urls]
homepage = "https://hypothesis.works"
source = "https://github.com/HypothesisWorks/hypothesis"
changelog = "https://hypothesis.readthedocs.io/en/latest/changelog.html"
documentation = "https://hypothesis.readthedocs.io"
issues = "https://github.com/HypothesisWorks/hypothesis/issues"

[project.optional-dependencies]
cli = ["click>=7.0", "black>=20.8b0", "rich>=9.0.0"]
codemods = ["libcst>=0.3.16"]
ghostwriter = ["black>=20.8b0"]
pytz = ["pytz>=2014.1"]
dateutil = ["python-dateutil>=1.4"]
lark = ["lark>=0.10.1"]  # probably still works with old `lark-parser` too
numpy = ["numpy>=1.19.3"]  # oldest with wheels for non-EOL Python (for now)
pandas = ["pandas>=1.1"]
pytest = ["pytest>=4.6"]
dpcontracts = ["dpcontracts>=0.4"]
redis = ["redis>=3.0.0"]
crosshair = ["hypothesis-crosshair>=0.0.25", "crosshair-tool>=0.0.95"]
# zoneinfo is an odd one: every dependency is platform-conditional.
zoneinfo = ["tzdata>=2025.2; sys_platform == 'win32' or sys_platform == 'emscripten'"]
# We only support Django versions with upstream support - see
# https://www.djangoproject.com/download/#supported-versions
# We also leave the choice of timezone library to the user, since it
# might be zoneinfo or pytz depending on version and configuration.
django = ["django>=4.2"]
watchdog = ["watchdog>=4.0.0"]
# Avoid changing this by hand. This is automatically updated by update_changelog_and_version
all = ["black>=20.8b0", "click>=7.0", "crosshair-tool>=0.0.95", "django>=4.2", "dpcontracts>=0.4", "hypothesis-crosshair>=0.0.25", "lark>=0.10.1", "libcst>=0.3.16", "numpy>=1.19.3", "pandas>=1.1", "pytest>=4.6", "python-dateutil>=1.4", "pytz>=2014.1", "redis>=3.0.0", "rich>=9.0.0", "tzdata>=2025.2; sys_platform == 'win32' or sys_platform == 'emscripten'", "watchdog>=4.0.0"]

[tool.setuptools.package-data]
hypothesis = ["vendor/tlds-alpha-by-domain.txt"]

[project.scripts]
hypothesis = "hypothesis.extra.cli:main"

[project.entry-points.pytest11]
hypothesispytest = "_hypothesis_pytestplugin"

[tool.hatch.build.targets.wheel]
packages = ["src/hypothesis"]
force-include = { "src/_hypothesis_pytestplugin.py" = "_hypothesis_pytestplugin.py", "src/_hypothesis_globals.py" = "_hypothesis_globals.py", "src/_hypothesis_ftz_detector.py" = "_hypothesis_ftz_detector.py" }
# TODO test that this really is included when using hatch
include = ["src/hypothesis/vendor/tlds-alpha-by-domain.txt"]
